import sqlite3
from pysqlcipher3 import dbapi2 as sqlcipher
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
import tkinter as tk
from tkinter import Toplevel, Label, Entry, Frame,Button, messagebox,filedialog
import json
import hashlib
import os
from pprint import pprint  # Permet d'afficher les donn√©es de fa√ßon lisible

DB_PASSWORD = "mon_mot_de_passe_securise"  # üîí Mot de passe pour SQLCipher

class Subscription:
    def __init__(self, root):
        """Initialise la base de donn√©es chiffr√©e avec SQLCipher et cr√©e les tables"""
        self.conn = sqlcipher.connect("utils/subscription.db")
        self.conn.execute(f"PRAGMA key = '{DB_PASSWORD}';")  # üîê D√©chiffrement obligatoire
        self.create_tables_once()  # V√©rifie si les tables existent d√©j√† et les cr√©e si n√©cessaire

        self.root = root

    def create_tables_once(self):
        """Cr√©e les tables USER et ARGUMENTS une seule fois si elles n'existent pas d√©j√†"""
        # V√©rifier si les tables existent d√©j√†
        cursor = self.conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user'")
        if not cursor.fetchone():  # Si la table 'user' n'existe pas
            self.conn.execute('''CREATE TABLE IF NOT EXISTS user (
                phone TEXT PRIMARY KEY,
                email TEXT,
                UsageLimit INTEGER,
                public TEXT,
                private TEXT
            )''')
        
        cursor = self.conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='arguments'")
        if not cursor.fetchone():  # Si la table 'arguments' n'existe pas
            self.conn.execute('''CREATE TABLE IF NOT EXISTS arguments (
                encrypted_message_hash TEXT PRIMARY KEY,
                encrypted_message TEXT
            )''')

        self.conn.commit()


    def convert_private_key_to_pkcs8(self, private_key):
        """Convertit la cl√© priv√©e en format PKCS#8 pour une meilleure gestion"""
        return private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )

    def register_user(self, phone, email):
        """G√©n√®re une paire de cl√©s RSA et enregistre un nouvel utilisateur dans la table USER"""
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048
        )
        public_key = private_key.public_key()

        private_pem = self.convert_private_key_to_pkcs8(private_key).decode()
        
        public_pem = public_key.public_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        ).decode()

        try:
            # Ins√®re un nouvel utilisateur dans la table USER
            self.conn.execute("INSERT INTO user (phone, email, UsageLimit, public, private) VALUES (?, ?, ?, ?, ?)",
                              (phone, email, 100, public_pem, private_pem))  # UsageLimit initialis√© √† 100
            self.conn.commit()
            messagebox.showinfo("Inscription", "Utilisateur inscrit avec succ√®s!")
        except sqlite3.IntegrityError:
            messagebox.showerror("Erreur", "Ce num√©ro est d√©j√† inscrit!")

    def recharge(self, encrypted_message):
            """D√©chiffre le message RSA et met √† jour le quota d'abonnement de l'utilisateur"""
            # Recherche de la cl√© priv√©e pour l'utilisateur
            cursor = self.conn.execute("SELECT private FROM user")
            row = cursor.fetchone()
            
            if row:
                try:
                    # D√©chiffrement du message
                    decrypted_value = self.decrypt_message(row[0], encrypted_message)
                    
                    # Si le d√©chiffrement r√©ussit, essayer de le d√©coder
                    if decrypted_value:
                        data = self.decode_message(decrypted_value)
                        
                        if data:
                            self.update_user_quota(data)
                except Exception as e:
                    
                    messagebox.showerror("Erreur", f"√âchec du rechargement : {e}")
            else:
                messagebox.showerror("Erreur", "Utilisateur non trouv√©")

    def decrypt_message(self, private_key_pem, encrypted_message):
        """D√©chiffre le message RSA en utilisant la cl√© priv√©e"""
        try:
            private_key = serialization.load_pem_private_key(
                private_key_pem.encode(),
                password=None
            )
            decrypted_value = private_key.decrypt(
                encrypted_message,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            )
            return decrypted_value
        except Exception as e:
            print(f"Erreur lors du d√©chiffrement : {e}")
            messagebox.showerror("Erreur", f"Erreur de d√©chiffrement : {e}")
            return None

    def decode_message(self, decrypted_value):
        """D√©code la valeur d√©chiffr√©e en JSON"""
        try:
            decoded_value = decrypted_value.decode('utf-8')
            data = json.loads(decoded_value)
            return data
        except UnicodeDecodeError as e:
            print(f"Erreur de d√©codage UTF-8 : {e}")
            messagebox.showerror("Erreur", f"Erreur de d√©codage du message : {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"Erreur de d√©codage JSON : {e}")
            messagebox.showerror("Erreur", f"Erreur de d√©codage JSON : {e}")
            return None

    def update_user_quota(self, data):
        """Met √† jour le quota d'abonnement de l'utilisateur"""

        # Appel de la m√©thode pour stocker le message crypt√© apr√®s mise √† jour
        if not self.store_encrypted_message(data):
            return
        
        try:
            new_usage_limit = int(data['limit'])
            self.conn.execute("UPDATE user SET UsageLimit = UsageLimit + ? WHERE phone = ?",
                              (new_usage_limit, data['phone']))
            self.conn.commit()

            # Affichage du message de succ√®s
            messagebox.showinfo("Successfully", f"User: {data['phone']}\nEmail: {data['email']}\nNew quota: {new_usage_limit}")

            
        except Exception as e:
            messagebox.showerror("Erreur", f"Something went wrong: {e}")

    def store_encrypted_message(self, data):
        """Enregistre le message crypt√© dans la table 'arguments' apr√®s avoir v√©rifi√© le hash"""

        # Convertir le dictionnaire en cha√Æne JSON
        message_json = json.dumps(data, sort_keys=True)

        # Encoder la cha√Æne JSON en bytes
        message_bytes = message_json.encode('utf-8') 
        # Calcul du hash du message crypt√© pour √©viter les doublons
        message_hash = hashlib.sha256(message_bytes).hexdigest()
        
        # V√©rification si le hash existe d√©j√† dans la table arguments
        cursor = self.conn.execute("SELECT encrypted_message_hash FROM arguments WHERE encrypted_message_hash = ?", (message_hash,))
        row = cursor.fetchone()
        
        
        if row:
            messagebox.showerror("Erreur", " do not use expired Artisan-Key!")
            return False
        else:
            # Enregistrement du message crypt√© dans la table arguments
            self.conn.execute("INSERT INTO arguments (encrypted_message_hash) VALUES (?)", (message_hash,))
            self.conn.commit()
            return True

    def show_user_info(self):
        """Affiche les informations de l'utilisateur dans une fen√™tre Toplevel"""
        cursor = self.conn.execute("SELECT phone, email, public FROM user")
        row = cursor.fetchone()
        
        if row:
            # Cr√©ation de la fen√™tre Toplevel pour afficher les infos
            top = Toplevel(self.root)
            top.title("Informations Utilisateur")
            top.geometry("300x150")  # Taille fixe
            top.resizable(False, False)  # D√©sactiver le redimensionnement
                
            
            info_text = f"Num√©ro: {row[0]}\nEmail: {row[1]}"
            
            # Ajout d'un label pour afficher les informations
            Label(top, text=info_text).pack(padx=10, pady=10)
            
            # Fonction pour copier les informations dans le presse-papiers
            def copy_info(phone, email):
                """Copie le num√©ro de t√©l√©phone et l'email dans le presse-papiers"""
                top.clipboard_clear()
                top.clipboard_append(f"Num√©ro: {phone}, Email: {email}")
                

            # Ajout d'un bouton pour copier les informations
            Button(top, text="Copy Email et Num√©ro", command=lambda: copy_info(row[0], row[1])).pack(pady=5)
            
            # Fonction pour sauvegarder la cl√© publique dans un fichier √† un emplacement sp√©cifique
            def save_address():
                """Permet de sauvegarder la cl√© publique dans un fichier √† un emplacement choisi"""
                filepath = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
                if filepath:  # Si l'utilisateur a s√©lectionn√© un emplacement
                    with open(filepath, "w") as f:
                        f.write(row[2])  # Sauvegarde de la cl√© publique dans le fichier
                    messagebox.showinfo("Sauvegard√©", f"Cl√© publique sauvegard√©e dans: {filepath}")
            
            # Ajout d'un bouton "Browse" pour choisir l'emplacement de sauvegarde
            Button(top, text="get your adress", command=save_address).pack(pady=5)
            

    def check_and_show_window(self):
        """V√©rifie si l'utilisateur a un compte, si oui, affiche les informations, sinon, l'invite √† s'inscrire"""
        if self.is_user_registered():
            self.show_user_info()
        else:
            self.show_register_window()

    def show_register_window(self):
        """Fen√™tre d'inscription utilisateur avec un formulaire"""
        if not self.is_user_registered():
            root = Toplevel(self.root)
            root.title("Inscription Utilisateur")

            frame = Frame(root)
            frame.pack(padx=20, pady=20)

            # Labels et champs de saisie
            phone_label = tk.Label(frame, text="Num√©ro de t√©l√©phone")
            phone_label.grid(row=0, column=0, padx=10, pady=5, sticky="e")
            phone_entry = tk.Entry(frame)
            phone_entry.grid(row=0, column=1, padx=10, pady=5)

            email_label = tk.Label(frame, text="Email")
            email_label.grid(row=1, column=0, padx=10, pady=5, sticky="e")
            email_entry = tk.Entry(frame)
            email_entry.grid(row=1, column=1, padx=10, pady=5)

            def on_submit():
                phone = phone_entry.get()
                email = email_entry.get()
                if phone and email:
                    self.register_user(phone, email)
                    root.destroy()
                else:
                    messagebox.showerror("Erreur", "Tous les champs doivent √™tre remplis.")

            submit_button = tk.Button(frame, text="S'inscrire", command=on_submit)
            submit_button.grid(row=2, columnspan=2, pady=10)

            root.mainloop()


    def is_user_registered(self):
        """V√©rifie si un utilisateur est d√©j√† inscrit dans la table USER"""
        cursor = self.conn.execute("SELECT COUNT(*) FROM user")
        row = cursor.fetchone()
        return row[0] > 0  # Retourne True si un utilisateur est enregistr√©, sinon False



    def getAllData(self):
        """
        R√©cup√®re tout le contenu des tables USER et TRANSACTIONS, puis affiche les donn√©es format√©es.
        :return: Dictionnaire contenant les donn√©es des deux tables.
        """
        data = {}

        # R√©cup√©ration de la table USER
        cursor = self.conn.execute("SELECT * FROM user")
        user_rows = cursor.fetchall()

        # R√©cup√©ration de la table TRANSACTIONS (ou une autre table)
        cursor = self.conn.execute("SELECT * FROM arguments")
        transaction_rows = cursor.fetchall()

        # R√©cup√©rer les noms des colonnes pour structurer les donn√©es
        user_columns = [desc[0] for desc in cursor.description]
        transaction_columns = [desc[0] for desc in cursor.description]

        # Conversion en format dictionnaire (cl√© = nom de colonne)
        users = [dict(zip(user_columns, row)) for row in user_rows]
        transactions = [dict(zip(transaction_columns, row)) for row in transaction_rows]

        # Stocker les donn√©es format√©es
        data["Users"] = users
        data["arguments"] = transactions

        # Afficher les donn√©es bien format√©es
        pprint(data)


        


    def decrement_usage_limit(self, value):
        """D√©cr√©mente le quota d'abonnement de l'utilisateur en s'assurant que la valeur √† d√©cr√©menter soit valide"""
        cursor = self.conn.execute("SELECT UsageLimit FROM user")
        row = cursor.fetchone()
        
        if row:
            if value < row[0]:
                # D√©cr√©mente la valeur du quota d'abonnement
                self.conn.execute("UPDATE user SET UsageLimit = UsageLimit - ? WHERE phone = ?", (value, row[0]))
                self.conn.commit()
                messagebox.showinfo("D√©cr√©mentation", f"Quota d'abonnement r√©duit de {value}")
            else:
                messagebox.showerror("Erreur", "La valeur √† d√©cr√©menter est sup√©rieure au quota actuel.")
        else:
            messagebox.showerror("Erreur", "Aucun utilisateur trouv√©")

    def get_usage_limit(self):
        """R√©cup√®re la valeur du quota d'abonnement de l'utilisateur"""
        cursor = self.conn.execute("SELECT UsageLimit FROM user")
        row = cursor.fetchone()
        if row:
            return row[0]
        return 0  # Retourne 0 si aucun utilisateur n'est trouv√©
    

# #utiliation de la classe
if __name__ == "__main__":

    root = tk.Tk()
    
    subscription = Subscription(root)
    subscription.show_user_info()
    print(subscription.get_usage_limit())

    root.mainloop()
